1.a) Consider the following loop invariant for the while loop:
	At the beginning of the while loop, we have k = 2^c. 
     Prove that the invariant holds by induction. 

POW(n){				// cost	times
	k = 1;			// c1	1
	c = 0;			// c2	1
	while(c < n){		// c3	n
		k = 2 * k;	// c4	n-1
		c = c + 1;	// c5	n-1
	}
	return k;		// c6	1
}

Proof by induction:
	Base Case: 
		c = 0
		k = 2^c = 2^0
		k = 1

	Inductive Step:
		1, 2, ... c, c+1 = 2^c+1

	Termination:
		The algorithm terminates when c >= n

1.c) Runtime is O(n)

2.a) for(i = 0; i < n; i = i+3){}
	O(n/3) => O(n)

2.b) for(i = n; i > 0; i-=4){ for(j = i; j < n; j++){}}
	O(4*n * n) => O(4n^2) => O(n^2)

2.c) for(i = 1; i < n; i*= 2){}
	O(log2(n))

3.a) 4n^5 - 50n^2 + 10n belongs to theta(n^5)

3.b) n^5 + 4n^2 + 15 belongs to omega(n^3)

4. Sort the following fxn's in order of non-decreasing asymptotic growth.
   That is order them f1, f2, f3 ... such that f1 belongs to O(f2), f2 belongs to O(f3)

	10^n	n^(1/3)	  n^n	log2(n)	  n^5	2^(sqrt(log2(n)))